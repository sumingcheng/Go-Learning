package main

import (
	"fmt"
)

func main() {
	i := 0 // 初始化变量i

	// 定义一个闭包，闭包内部访问并修改外部变量i
	f := func() int {
		i++
		return i
	}

	// 创建一个容量为1的整数通道
	c := make(chan int, 1)

	// 向通道发送函数f的返回值，此时i从0增加到1
	c <- f()

	// 使用select语句尝试进行第二次f函数调用并发送数据
	select {
	case c <- f(): // 尝试将f的返回值（此时i从1增加到2）发送到通道
		// 如果能够发送，则执行这里的代码
		// 由于通道已满，这里的代码不会被执行
	default:
		// 通道已满，无法发送更多数据，执行默认操作
		fmt.Println(i) // 打印当前的i值，此时为2
	}
}

/*
  变量 i 的初始化：定义了一个整数变量 i 并设置其初始值为 0。
  闭包 f 的定义：创建一个闭包 f，该闭包每次被调用时都会增加 i 的值并返回新的值。
  通道 c 的创建与使用：定义了一个容量为 1 的整数通道 c，并通过 f 函数第一次调用向其发送数据，此时 i 由 0 增至 1。
  select 语句：尝试再次调用 f 并将结果发送到通道 c。由于通道已满，这一操作无法完成，因此执行到 default 分支
  打印出此时 i 的值，为 2（因为在尝试发送前 f 已经被调用）。
*/
