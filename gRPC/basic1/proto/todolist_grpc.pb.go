// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: gRPC/basic1/proto/todolist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoList_AddTodo_FullMethodName    = "/TodoList/AddTodo"
	TodoList_ToggleTodo_FullMethodName = "/TodoList/ToggleTodo"
	TodoList_RemoveTodo_FullMethodName = "/TodoList/RemoveTodo"
)

// TodoListClient is the client API for TodoList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoListClient interface {
	AddTodo(ctx context.Context, in *AddingTodoRequest, opts ...grpc.CallOption) (*TodoResponse, error)
	ToggleTodo(ctx context.Context, in *TogglingTodoRequest, opts ...grpc.CallOption) (*TodoResponse, error)
	RemoveTodo(ctx context.Context, in *RemovingTodoRequest, opts ...grpc.CallOption) (*TodoResponse, error)
}

type todoListClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoListClient(cc grpc.ClientConnInterface) TodoListClient {
	return &todoListClient{cc}
}

func (c *todoListClient) AddTodo(ctx context.Context, in *AddingTodoRequest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, TodoList_AddTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) ToggleTodo(ctx context.Context, in *TogglingTodoRequest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, TodoList_ToggleTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) RemoveTodo(ctx context.Context, in *RemovingTodoRequest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, TodoList_RemoveTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoListServer is the server API for TodoList service.
// All implementations must embed UnimplementedTodoListServer
// for forward compatibility
type TodoListServer interface {
	AddTodo(context.Context, *AddingTodoRequest) (*TodoResponse, error)
	ToggleTodo(context.Context, *TogglingTodoRequest) (*TodoResponse, error)
	RemoveTodo(context.Context, *RemovingTodoRequest) (*TodoResponse, error)
	//mustEmbedUnimplementedTodoListServer()
}

// UnimplementedTodoListServer must be embedded to have forward compatible implementations.
type UnimplementedTodoListServer struct {
}

func (UnimplementedTodoListServer) AddTodo(context.Context, *AddingTodoRequest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTodo not implemented")
}
func (UnimplementedTodoListServer) ToggleTodo(context.Context, *TogglingTodoRequest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleTodo not implemented")
}
func (UnimplementedTodoListServer) RemoveTodo(context.Context, *RemovingTodoRequest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTodo not implemented")
}
func (UnimplementedTodoListServer) mustEmbedUnimplementedTodoListServer() {}

// UnsafeTodoListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoListServer will
// result in compilation errors.
type UnsafeTodoListServer interface {
	mustEmbedUnimplementedTodoListServer()
}

func RegisterTodoListServer(s grpc.ServiceRegistrar, srv TodoListServer) {
	s.RegisterService(&TodoList_ServiceDesc, srv)
}

func _TodoList_AddTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddingTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).AddTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoList_AddTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).AddTodo(ctx, req.(*AddingTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_ToggleTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TogglingTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).ToggleTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoList_ToggleTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).ToggleTodo(ctx, req.(*TogglingTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_RemoveTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovingTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).RemoveTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoList_RemoveTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).RemoveTodo(ctx, req.(*RemovingTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoList_ServiceDesc is the grpc.ServiceDesc for TodoList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoList",
	HandlerType: (*TodoListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTodo",
			Handler:    _TodoList_AddTodo_Handler,
		},
		{
			MethodName: "ToggleTodo",
			Handler:    _TodoList_ToggleTodo_Handler,
		},
		{
			MethodName: "RemoveTodo",
			Handler:    _TodoList_RemoveTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/basic1/proto/todolist.proto",
}
