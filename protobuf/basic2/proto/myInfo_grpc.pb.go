// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: myInfo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MyInfoService_GetData_FullMethodName = "/MyInfoService/GetData"
)

// MyInfoServiceClient is the client API for MyInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyInfoServiceClient interface {
	GetData(ctx context.Context, in *MyInfoRequest, opts ...grpc.CallOption) (*MyInfoResponse, error)
}

type myInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyInfoServiceClient(cc grpc.ClientConnInterface) MyInfoServiceClient {
	return &myInfoServiceClient{cc}
}

func (c *myInfoServiceClient) GetData(ctx context.Context, in *MyInfoRequest, opts ...grpc.CallOption) (*MyInfoResponse, error) {
	out := new(MyInfoResponse)
	err := c.cc.Invoke(ctx, MyInfoService_GetData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyInfoServiceServer is the server API for MyInfoService service.
// All implementations must embed UnimplementedMyInfoServiceServer
// for forward compatibility
type MyInfoServiceServer interface {
	GetData(context.Context, *MyInfoRequest) (*MyInfoResponse, error)
	mustEmbedUnimplementedMyInfoServiceServer()
}

// UnimplementedMyInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMyInfoServiceServer struct {
}

func (UnimplementedMyInfoServiceServer) GetData(context.Context, *MyInfoRequest) (*MyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedMyInfoServiceServer) mustEmbedUnimplementedMyInfoServiceServer() {}

// UnsafeMyInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyInfoServiceServer will
// result in compilation errors.
type UnsafeMyInfoServiceServer interface {
	mustEmbedUnimplementedMyInfoServiceServer()
}

func RegisterMyInfoServiceServer(s grpc.ServiceRegistrar, srv MyInfoServiceServer) {
	s.RegisterService(&MyInfoService_ServiceDesc, srv)
}

func _MyInfoService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyInfoServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyInfoService_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyInfoServiceServer).GetData(ctx, req.(*MyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyInfoService_ServiceDesc is the grpc.ServiceDesc for MyInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MyInfoService",
	HandlerType: (*MyInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _MyInfoService_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myInfo.proto",
}
