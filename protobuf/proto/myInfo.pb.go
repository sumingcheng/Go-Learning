// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: myInfo.proto

package proto

// 引入必要的 Go 包。
import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

// 以下两行代码是自动代码校验，确保生成的代码是最新的。
const (
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion) // 确保 protoimpl 的版本是最新的。
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20) // 确保运行时的 protoimpl 是最新的。
)

// MyInfoRequest 是一个消息，用来存放请求的数据结构。
type MyInfoRequest struct {
	state         protoimpl.MessageState  // 内部状态，由 protoimpl 管理。
	sizeCache     protoimpl.SizeCache     // 缓存大小，由 protoimpl 管理。
	unknownFields protoimpl.UnknownFields // 未知字段，由 protoimpl 管理。

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`              // 名字，字符串类型。
	Age        int32  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`               // 年龄，int32 类型。
	IsMarriage bool   `protobuf:"varint,3,opt,name=isMarriage,proto3" json:"isMarriage,omitempty"` // 是否已婚，布尔类型。
}

// Reset 重置消息的状态。
func (x *MyInfoRequest) Reset() {
	*x = MyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_myInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

// String 将消息转换成字符串。
func (x *MyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 标记这是一个 protobuf 消息。
func (*MyInfoRequest) ProtoMessage() {}

// ProtoReflect 返回消息的反射信息。
func (x *MyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_myInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: 使用 MyInfoRequest.ProtoReflect.Descriptor 代替。
func (*MyInfoRequest) Descriptor() ([]byte, []int) {
	return file_myInfo_proto_rawDescGZIP(), []int{0}
}

// GetName 获取姓名。
func (x *MyInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetAge 获取年龄。
func (x *MyInfoRequest) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

// GetIsMarriage 获取婚姻状态。
func (x *MyInfoRequest) GetIsMarriage() bool {
	if x != nil {
		return x.IsMarriage
	}
	return false
}

// MyInfoResponse 是一个消息，用来存放响应的数据结构。
type MyInfoResponse struct {
	state         protoimpl.MessageState  // 内部状态，由 protoimpl 管理。
	sizeCache     protoimpl.SizeCache     // 缓存大小，由 protoimpl 管理。
	unknownFields protoimpl.UnknownFields // 未知字段，由 protoimpl 管理。

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`              // 名字，字符串类型。
	Age        int32  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`               // 年龄，int32 类型。
	IsMarriage bool   `protobuf:"varint,3,opt,name=isMarriage,proto3" json:"isMarriage,omitempty"` // 是否已婚，布尔类型。
}

// Reset 重置消息的状态。
func (x *MyInfoResponse) Reset() {
	*x = MyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_myInfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

// String 将消息转换成字符串。
func (x *MyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 标记这是一个 protobuf 消息。
func (*MyInfoResponse) ProtoMessage() {}

// ProtoReflect 返回消息的反射信息。
func (x *MyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_myInfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: 使用 MyInfoResponse.ProtoReflect.Descriptor 代替。
func (*MyInfoResponse) Descriptor() ([]byte, []int) {
	return file_myInfo_proto_rawDescGZIP(), []int{1}
}

// GetName 获取姓名。
func (x *MyInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetAge 获取年龄。
func (x *MyInfoResponse) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

// GetIsMarriage 获取婚姻状态。
func (x *MyInfoResponse) GetIsMarriage() bool {
	if x != nil {
		return x.IsMarriage
	}
	return false
}

// File_myInfo_proto 是 protobuf 文件的描述符。
var File_myInfo_proto protoreflect.FileDescriptor

// file_myInfo_proto_rawDesc 是原始的 protobuf 文件描述数据。
var file_myInfo_proto_rawDesc = []byte{
	// ... (protobuf 文件的原始字节数据)
}

var (
	file_myInfo_proto_rawDescOnce sync.Once                   // 确保原始描述只被加载一次。
	file_myInfo_proto_rawDescData = file_myInfo_proto_rawDesc // 原始描述数据。
)

// file_myInfo_proto_rawDescGZIP 返回 gzip 压缩的 protobuf 文件描述数据。
func file_myInfo_proto_rawDescGZIP() []byte {
	file_myInfo_proto_rawDescOnce.Do(func() {
		file_myInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_myInfo_proto_rawDescData)
	})
	return file_myInfo_proto_rawDescData
}

// file_myInfo_proto_msgTypes 存储消息类型的元数据。
var file_myInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 2)

// file_myInfo_proto_goTypes 存储 go 类型的列表。
var file_myInfo_proto_goTypes = []interface{}{
	(*MyInfoRequest)(nil),  // 0: MyInfoRequest
	(*MyInfoResponse)(nil), // 1: MyInfoResponse
}

// file_myInfo_proto_depIdxs 存储依赖索引的列表。
var file_myInfo_proto_depIdxs = []int32{
	0, // 0: MyInfoService.GetData:input_type -> MyInfoRequest
	1, // 1: MyInfoService.GetData:output_type -> MyInfoResponse
	1, // [1:2] 是方法输出类型的子列表
	0, // [0:1] 是方法输入类型的子列表
	0, // [0:0] 是扩展类型名的子列表
	0, // [0:0] 是扩展扩展的子列表
	0, // [0:0] 是字段类型名的子列表
}

func init() { file_myInfo_proto_init() }

// file_myInfo_proto_init 初始化 protobuf 文件。
func file_myInfo_proto_init() {
	if File_myInfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		// 设置消息的导出器。
		file_myInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_myInfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	// 设置类型构建器。
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_myInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_myInfo_proto_goTypes,
		DependencyIndexes: file_myInfo_proto_depIdxs,
		MessageInfos:      file_myInfo_proto_msgTypes,
	}.Build()
	File_myInfo_proto = out.File
	file_myInfo_proto_rawDesc = nil
	file_myInfo_proto_goTypes = nil
	file_myInfo_proto_depIdxs = nil
}
