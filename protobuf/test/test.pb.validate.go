// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: test.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CourseInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CourseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CourseInfoMultiError, or
// nil if none found.
func (m *CourseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCid() <= 0 {
		err := CourseInfoValidationError{
			field:  "Cid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCname()); l < 1 || l > 100 {
		err := CourseInfoValidationError{
			field:  "Cname",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTeacher()); l < 1 || l > 50 {
		err := CourseInfoValidationError{
			field:  "Teacher",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CourseInfoMultiError(errors)
	}

	return nil
}

// CourseInfoMultiError is an error wrapping multiple validation errors
// returned by CourseInfo.ValidateAll() if the designated constraints aren't met.
type CourseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseInfoMultiError) AllErrors() []error { return m }

// CourseInfoValidationError is the validation error returned by
// CourseInfo.Validate if the designated constraints aren't met.
type CourseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseInfoValidationError) ErrorName() string { return "CourseInfoValidationError" }

// Error satisfies the builtin error interface
func (e CourseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseInfoValidationError{}

// Validate checks the field values on CourseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CourseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CourseResponseMultiError,
// or nil if none found.
func (m *CourseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCode() < 0 {
		err := CourseResponseValidationError{
			field:  "Code",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMsg()) > 200 {
		err := CourseResponseValidationError{
			field:  "Msg",
			reason: "value length must be at most 200 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetData()) < 1 {
		err := CourseResponseValidationError{
			field:  "Data",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CourseResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CourseResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CourseResponseMultiError(errors)
	}

	return nil
}

// CourseResponseMultiError is an error wrapping multiple validation errors
// returned by CourseResponse.ValidateAll() if the designated constraints
// aren't met.
type CourseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseResponseMultiError) AllErrors() []error { return m }

// CourseResponseValidationError is the validation error returned by
// CourseResponse.Validate if the designated constraints aren't met.
type CourseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseResponseValidationError) ErrorName() string { return "CourseResponseValidationError" }

// Error satisfies the builtin error interface
func (e CourseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseResponseValidationError{}

// Validate checks the field values on CourseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CourseRequestMultiError, or
// nil if none found.
func (m *CourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _CourseRequest_Type_InLookup[m.GetType()]; !ok {
		err := CourseRequestValidationError{
			field:  "Type",
			reason: "value must be in list [Online Offline]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CourseRequestMultiError(errors)
	}

	return nil
}

// CourseRequestMultiError is an error wrapping multiple validation errors
// returned by CourseRequest.ValidateAll() if the designated constraints
// aren't met.
type CourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseRequestMultiError) AllErrors() []error { return m }

// CourseRequestValidationError is the validation error returned by
// CourseRequest.Validate if the designated constraints aren't met.
type CourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseRequestValidationError) ErrorName() string { return "CourseRequestValidationError" }

// Error satisfies the builtin error interface
func (e CourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseRequestValidationError{}

var _CourseRequest_Type_InLookup = map[string]struct{}{
	"Online":  {},
	"Offline": {},
}
