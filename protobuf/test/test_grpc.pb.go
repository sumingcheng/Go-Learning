// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: test.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CourseClient_GetCourseList_FullMethodName = "/CourseClient/GetCourseList"
)

// CourseClientClient is the client API for CourseClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseClientClient interface {
	GetCourseList(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseResponse, error)
}

type courseClientClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseClientClient(cc grpc.ClientConnInterface) CourseClientClient {
	return &courseClientClient{cc}
}

func (c *courseClientClient) GetCourseList(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*CourseResponse, error) {
	out := new(CourseResponse)
	err := c.cc.Invoke(ctx, CourseClient_GetCourseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseClientServer is the server API for CourseClient service.
// All implementations must embed UnimplementedCourseClientServer
// for forward compatibility
type CourseClientServer interface {
	GetCourseList(context.Context, *CourseRequest) (*CourseResponse, error)
	mustEmbedUnimplementedCourseClientServer()
}

// UnimplementedCourseClientServer must be embedded to have forward compatible implementations.
type UnimplementedCourseClientServer struct {
}

func (UnimplementedCourseClientServer) GetCourseList(context.Context, *CourseRequest) (*CourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseList not implemented")
}
func (UnimplementedCourseClientServer) mustEmbedUnimplementedCourseClientServer() {}

// UnsafeCourseClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseClientServer will
// result in compilation errors.
type UnsafeCourseClientServer interface {
	mustEmbedUnimplementedCourseClientServer()
}

func RegisterCourseClientServer(s grpc.ServiceRegistrar, srv CourseClientServer) {
	s.RegisterService(&CourseClient_ServiceDesc, srv)
}

func _CourseClient_GetCourseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseClientServer).GetCourseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseClient_GetCourseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseClientServer).GetCourseList(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseClient_ServiceDesc is the grpc.ServiceDesc for CourseClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CourseClient",
	HandlerType: (*CourseClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourseList",
			Handler:    _CourseClient_GetCourseList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
